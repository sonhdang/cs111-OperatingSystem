Total: 22 samples
      19  86.4%  86.4%       21  95.5% thread_worker
       2   9.1%  95.5%        2   9.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       1   4.5% 100.0%        1   4.5% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:96
       0   0.0% 100.0%       21  95.5% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:118
       0   0.0% 100.0%        2   9.1% SortedList_insert
       0   0.0% 100.0%       21  95.5% start_thread
ROUTINE ====================== thread_worker in /u/cs/ugrad/hai/cs111/lab2b/lab2_list.c
    19     21 Total samples (flat / cumulative)
     .      .   28:     fprintf(stderr, "Segmentation fault - %s\n", strerror(errno));
     .      .   29:     exit(EXIT_FAILURE);
     .      .   30: }
     .      .   31: 
     .      .   32: void* thread_worker(void* arg)      // Thread Function
---
     .      .   33: {
     .      .   34:     switch(opt_sync)                // Synchronization options
     .      .   35:     {
     .      .   36:         case 'm':   //Mutex lock
     .      .   37:             pthread_mutex_lock(&mutex);
     .      .   38:             break;
     .      .   39:         case 's':   //Spin lock
    19     19   40:             while(__sync_lock_test_and_set(&lock,1));
     .      .   41:             break;
     .      .   42:     }
     .      .   43: 
     .      .   44:     /* CRITICAL SECTION */
     .      .   45:     int startIndex = *((int *)arg) * num_iterations;
     .      .   46:     for (int i = startIndex; i < startIndex + num_iterations; i++)
     .      2   47:         SortedList_insert(listhead, &pool[i]);
     .      .   48: 
     .      .   49:     SortedList_length(listhead);
     .      .   50:     for(int i = startIndex; i < startIndex + num_iterations; i++)
     .      .   51:     {
     .      .   52:         SortedListElement_t *e = SortedList_lookup(listhead, pool[i].key);
     .      .   53:         SortedList_delete(e);
     .      .   54:     }
     .      .   55: 
     .      .   56:     switch(opt_sync)
     .      .   57:     {
     .      .   58:         case 'm':   //Mutex unlock 
     .      .   59:             pthread_mutex_unlock(&mutex);
     .      .   60:             break;
     .      .   61:         case 's':   //Spin unlock
     .      .   62:             __sync_lock_release(&lock);
     .      .   63:             break;
     .      .   64:     }
     .      .   65:     pthread_exit(EXIT_SUCCESS);
---
     .      .   66: }
     .      .   67: 
     .      .   68: int main(int argc, char *argv[])
     .      .   69: {
     .      .   70:     signal(SIGSEGV, handler);
ROUTINE ====================== thread_worker in /u/cs/ugrad/hai/cs111/lab2b/lab2_list.c
    19     21 Total samples (flat / cumulative)
     .      .   28:     fprintf(stderr, "Segmentation fault - %s\n", strerror(errno));
     .      .   29:     exit(EXIT_FAILURE);
     .      .   30: }
     .      .   31: 
     .      .   32: void* thread_worker(void* arg)      // Thread Function
---
     .      .   33: {
     .      .   34:     switch(opt_sync)                // Synchronization options
     .      .   35:     {
     .      .   36:         case 'm':   //Mutex lock
     .      .   37:             pthread_mutex_lock(&mutex);
     .      .   38:             break;
     .      .   39:         case 's':   //Spin lock
    19     19   40:             while(__sync_lock_test_and_set(&lock,1));
     .      .   41:             break;
     .      .   42:     }
     .      .   43: 
     .      .   44:     /* CRITICAL SECTION */
     .      .   45:     int startIndex = *((int *)arg) * num_iterations;
     .      .   46:     for (int i = startIndex; i < startIndex + num_iterations; i++)
     .      2   47:         SortedList_insert(listhead, &pool[i]);
     .      .   48: 
     .      .   49:     SortedList_length(listhead);
     .      .   50:     for(int i = startIndex; i < startIndex + num_iterations; i++)
     .      .   51:     {
     .      .   52:         SortedListElement_t *e = SortedList_lookup(listhead, pool[i].key);
     .      .   53:         SortedList_delete(e);
     .      .   54:     }
     .      .   55: 
     .      .   56:     switch(opt_sync)
     .      .   57:     {
     .      .   58:         case 'm':   //Mutex unlock 
     .      .   59:             pthread_mutex_unlock(&mutex);
     .      .   60:             break;
     .      .   61:         case 's':   //Spin unlock
     .      .   62:             __sync_lock_release(&lock);
     .      .   63:             break;
     .      .   64:     }
     .      .   65:     pthread_exit(EXIT_SUCCESS);
---
     .      .   66: }
     .      .   67: 
     .      .   68: int main(int argc, char *argv[])
     .      .   69: {
     .      .   70:     signal(SIGSEGV, handler);
